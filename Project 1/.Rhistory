Xa = rexp(n=1, rate=1/10)
Xb = rexp(n=1, rate=1/10)
x = max(Xa, Xb)
x = max(rexp(n=1, rate=1/10), rexp(n=1, rate=1/10))
x = max(rexp(n=1, rate=1/10), rexp(n=1, rate=1/10))
x = max(rexp(n=1, rate=1/10), rexp(n=1, rate=1/10))
x
Xa = rexp(n=1, rate=1/10)
Xb = rexp(n=1, rate=1/10)
x = max(Xa, Xb)
x
Xa = rexp(n=1, rate=1/10)
Xb = rexp(n=1, rate=1/10)
x = max(Xa, Xb)
x
Xa = rexp(n=1, rate=1/10)
Xb = rexp(n=1, rate=1/10)
x = max(Xa, Xb)
x
Xa = rexp(n=1, rate=1/10)
Xb = rexp(n=1, rate=1/10)
x = max(Xa, Xb)
x
Xa = rexp(n=1, rate=1/10)
Xb = rexp(n=1, rate=1/10)
x = max(Xa, Xb)
x
Xa = rexp(n=1, rate=1/10)
Xb = rexp(n=1, rate=1/10)
x = max(Xa, Xb)
x
x = max(rexp(n=1, rate=1/10), rexp(n=1, rate=1/10))
x
x = max(rexp(n=1, rate=1/10), rexp(n=1, rate=1/10))
x
x = max(rexp(n=1, rate=1/10), rexp(n=1, rate=1/10))
x
x = max(rexp(n=1, rate=1/10), rexp(n=1, rate=1/10))
x
x = max(rexp(n=1, rate=1/10), rexp(n=1, rate=1/10))
x
x = max(rexp(n=1, rate=1/10), rexp(n=1, rate=1/10))
x
x = max(rexp(n=1, rate=1/10), rexp(n=1, rate=1/10))
x
x = max(rexp(n=1, rate=1/10), rexp(n=1, rate=1/10))
x
x = max(rexp(n=1, rate=1/10), rexp(n=1, rate=1/10))
x
x = max(rexp(n=1, rate=1/10), rexp(n=1, rate=1/10))
x
x = max(rexp(n=1, rate=1/10), rexp(n=1, rate=1/10))
x
x = max(rexp(n=1, rate=1/10), rexp(n=1, rate=1/10))
x
x = max(rexp(n=1, rate=1/10), rexp(n=1, rate=1/10))
x
Xa = rexp(n=1, rate=1/10)
Xb = rexp(n=1, rate=1/10)
x = max(Xa, Xb)
x
x = max(rexp(n=1, rate=1/10), rexp(n=1, rate=1/10))
x
Xa = rexp(n=1, rate=1/10)
Xb = rexp(n=1, rate=1/10)
x = max(Xa, Xb)
x
x = max(rexp(n=1, rate=1/10), rexp(n=1, rate=1/10))
x
Xa = rexp(n=1, rate=1/10)
Xb = rexp(n=1, rate=1/10)
x = max(Xa, Xb)
x
x = max(rexp(n=1, rate=1/10), rexp(n=1, rate=1/10))
x
Xa = rexp(n=1, rate=1/10)
Xb = rexp(n=1, rate=1/10)
x = max(Xa, Xb)
x
x = max(rexp(n=1, rate=1/10), rexp(n=1, rate=1/10))
x
Xa = rexp(n=1, rate=1/10)
Xb = rexp(n=1, rate=1/10)
x = max(Xa, Xb)
x
x = max(rexp(n=1, rate=1/10), rexp(n=1, rate=1/10))
x
Xa = rexp(n=1, rate=1/10)
Xb = rexp(n=1, rate=1/10)
x = max(Xa, Xb)
size10k = replicate(10000, x)
Xa = rexp(n=1, rate=1/10)
Xb = rexp(n=1, rate=1/10)
x = max(Xa, Xb)
size10k = replicate(10000, x)
hist(size10k, prob = TRUE)
Xa = rexp(n=1, rate=1/10)
Xb = rexp(n=1, rate=1/10)
x = max(Xa, Xb)
size10k = replicate(10000, x)
hist(size10k, prob = TRUE)
Xa = rexp(n=1, rate=1/10)
Xb = rexp(n=1, rate=1/10)
x = max(Xa, Xb)
size10k = replicate(10000, x)
hist(size10k, prob = TRUE)
size10k = replicate(10000, max(rexp(n=1, rate=1/10), rexp(n=1, rate=1/10)))
hist(size10k, prob = TRUE)
source('D:/School/Spring 2021/Statistical Methods for Data Science/Mini-Projects/Project 1/Question 1.R')
1-pexp(15, rate = 1/size10k.mean)
1-pexp(15, rate = 1/(size10k.mean))
1-pexp(15, rate = 1/m)
1-pexp(15, rate = 1/ mean(size10k))
?pexp
source('D:/School/Spring 2021/Statistical Methods for Data Science/Mini-Projects/Project 1/Question 1.R')
# iv) Using the
mean(size10k)
# iv) Using the
mean(size10k)
size1k = replicate(1000, max(rexp(n=1, rate=1/10), rexp(n=1, rate=1/10)))
mean(size1k)
#1b)
# i) Simulating 1 block lifetime of Xa and Xb.
Xa = rexp(n=1, rate=1/10) # Simulating 1 draw of Xa.
Xb = rexp(n=1, rate=1/10) # Simulation 1 draw of Xb.
x = max(Xa, Xb) # Taking the maximum of Xa and Xb.
# ii) Repeating step i) 10,000 times using the replicate function.
size10k = replicate(10000, max(rexp(n=1, rate=1/10), rexp(n=1, rate=1/10)))
# iii) Using Hist to generate a histogram and then superimposing
# the density function on the histogram using curve.
hist(size10k, prob = TRUE)
pdf = function(x){
return (0.2*exp(-0.1*x)-0.2*exp(-0.2*x))
}
curve(pdf(x), add = TRUE)
# iv) Using the
mean(size10k)
1-pexp(15, rate = 1/ mean(size10k)) # Using 1 - the distribution function to
# calculate the probability.
size1k = replicate(1000, max(rexp(n=1, rate=1/10), rexp(n=1, rate=1/10)))
mean(size1k)
1-pexp(15, rate = 1/(mean(size1k)))
size100k = replicate(100000, max(rexp(n=1, rate=1/10), rexp(n=1, rate=1/10)))
mean(size100k)
1-pexp(15, rate = 1/(mean(size100k)))
#1b)
# i) Simulating 1 block lifetime of Xa and Xb.
Xa = rexp(n=1, rate=1/10) # Simulating 1 draw of Xa.
Xb = rexp(n=1, rate=1/10) # Simulation 1 draw of Xb.
x = max(Xa, Xb) # Taking the maximum of Xa and Xb.
# ii) Repeating step i) 10,000 times using the replicate function.
size10k = replicate(10000, max(rexp(n=1, rate=1/10), rexp(n=1, rate=1/10)))
# iii) Using Hist to generate a histogram and then superimposing
# the density function on the histogram using curve.
hist(size10k, prob = TRUE)
pdf = function(x){
return (0.2*exp(-0.1*x)-0.2*exp(-0.2*x))
}
curve(pdf(x), add = TRUE)
# iv) Using the
mean(size10k)
1-pexp(15, rate = 1/ mean(size10k)) # Using 1 - the distribution function to
# calculate the probability.
source('D:/School/Spring 2021/Statistical Methods for Data Science/Mini-Projects/Project 1/Question 1.R')
x = runif(10000, min=0, max=1)
y = runif(10000, min=0, max=1)
in.circle = (x-0.5)^2 + (y-0.5)^2 <= 0.5^2
sum(in.circle)
x = runif(10000, min=0, max=1)
y = runif(10000, min=0, max=1)
in.circle = (x-0.5)^2 + (y-0.5)^2 <= 0.5^2
4*(sum(in.circle)/10000)
x = runif(100000, min=0, max=1)
y = runif(100000, min=0, max=1)
in.circle = (x-0.5)^2 + (y-0.5)^2 <= 0.5^2
4*(sum(in.circle)/100000)
x = runif(100000000. min=0, max=1)
y = runif(100000000, min=0, max=1)
in.circle = (x-0.5)^2 + (y-0.5)^2 <= 0.5^2
4*(sum(in.circle)/100000000)
x = runif(100000000, min=0, max=1)
y = runif(100000000, min=0, max=1)
in.circle = (x-0.5)^2 + (y-0.5)^2 <= 0.5^2
4*(sum(in.circle)/100000000)
x = runif(10000, min=0, max=1)
y = runif(10000, min=0, max=1)
in.circle = (x-0.5)^2 + (y-0.5)^2 <= 0.5^2
4*(sum(in.circle)/10000)
x = runif(10000, min=0, max=1)
y = runif(10000, min=0, max=1)
inscribed = (x-0.5)^2 + (y-0.5)^2 <= 0.5^2
4*(sum(inscribed)/10000)
